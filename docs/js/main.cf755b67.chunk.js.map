{"version":3,"sources":["ChoseIconWidget.js","App.js","serviceWorker.js","index.js"],"names":["console","log","icons","useStyles","makeStyles","theme","chip","margin","spacing","oot","display","formControl","group","ChoseIconWidget","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","filterValue","setFilter","_React$useState3","_React$useState4","radioValueIconsType","setIconsTypeValue","_React$useState5","_React$useState6","radioValueModulesType","setModuleTypeValue","_React$useState7","_React$useState8","chosedIcons","setChosedIcons","_React$useState9","_React$useState10","copyTemplateValue","setCopyTemplateValue","useEffect","retempateCopyValue","value","templateCopyString","keys","map","key","concat","join","handleIconsClick","handleDeleteChosedIcons","newChosedIcons","toConsumableArray","indexInChosed","forEach","chosedKey","index","splice","react_default","a","createElement","Fragment","TextField","className","copyField","fullWidth","multiline","Icon","Chip","size","icon","label","onClick","onDelete","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","event","target","iconType","FormControlLabel","control","Radio","typeModules","placeholder","variant","InputProps","startAdornment","InputAdornment","position","FilterList_default","filter","iconsKeys","indexOf","filterChosed","normalFilter","toUpperCase","Label","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VAYAA,QAAQC,IAAIC,GAEZ,IAAMC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,KAExBC,IAAK,CACHC,QAAS,QAEXC,YAAa,CACXJ,OAAQF,EAAMG,QAAQ,IAExBI,MAAO,CACLL,OAAQF,EAAMG,QAAQ,EAAG,OAIdK,EAAA,WACb,IAAMC,EAAUX,IADGY,EAEcC,IAAMC,SAAS,IAF7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAEZM,EAFYH,EAAA,GAECI,EAFDJ,EAAA,GAAAK,EAG8BP,IAAMC,SAAS,UAH7CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGZE,EAHYD,EAAA,GAGSE,EAHTF,EAAA,GAAAG,EAIiCX,IAAMC,SAAS,UAJhDW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIZE,EAJYD,EAAA,GAIWE,EAJXF,EAAA,GAAAG,EAKmBf,IAAMC,SAAS,IALlCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKZE,EALYD,EAAA,GAKCE,EALDF,EAAA,GAAAG,EAM+BnB,IAAMC,SAAS,IAN9CmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAMZE,EANYD,EAAA,GAMOE,EANPF,EAAA,GAQnBpB,IAAMuB,UAAU,WACdC,MAGF,IAgKmBC,EAhKbC,EAAqB,SAAAC,GAAI,OAC7BA,EACGC,IAAI,SAAAC,GAAG,MACoB,WAA1BhB,EAAA,cAAAiB,OACkBD,EADlB,8BAAAC,OACkDD,EADlD,kBAAAC,OAEiBD,EAFjB,iCAAAC,OAEoDD,EAFpD,QAIDE,KAAK,OAKJC,EAAmB,SAAAH,GAAG,OAAI,WAC9BX,EAAeD,EAAYa,OAAO,CAACD,KACnCP,EAAqBI,EAAmBT,EAAYa,OAAO,CAACD,QAGxDL,EAAqB,kBACzBF,EAAqBI,EAAmBT,KAUpCgB,EAA0B,SAAAJ,GAAG,OAAI,WACrC,IAAMK,EAAc/B,OAAAgC,EAAA,EAAAhC,CAAOc,GACvBmB,GAAiB,EACrBF,EAAeG,QAAQ,SAACC,EAAWC,GAC7BV,IAAQS,IAAWF,EAAgBG,KAEzCL,EAAeM,OAAOJ,EAAe,GACrClB,EAAegB,KAGjB,OACEO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,UAAWhD,EAAQiD,UACnBC,WAAW,EACXC,WAAW,EACXxB,MAAOJ,KAGXoB,EAAAC,EAAAC,cAAA,WACG1B,EAAYW,IAAI,SAAAC,GACf,IAAMqB,EAAOhE,EAAM2C,GACnB,OACEY,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,KAAK,QACLN,UAAWhD,EAAQR,KACnBuC,IAAKA,EACLwB,KAAMZ,EAAAC,EAAAC,cAACO,EAAD,MACNI,MAAO,GACPC,QAASvB,EAAiBH,GAC1B2B,SAAUvB,EAAwBJ,QAK1CY,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAaC,UAAU,WAAWZ,UAAWhD,EAAQH,aACnD8C,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWD,UAAU,UAArB,cACAjB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,aAAW,aACXC,KAAK,aACLhB,UAAWhD,EAAQF,MACnB6B,MAAOhB,EACPsD,SAnDsB,SAAAC,GAC5BtD,EAAkBsD,EAAMC,OAAOxC,SAoDxB,CAAC,SAAU,UAAW,UAAW,UAAW,SAASG,IACpD,SAAAsC,GAAQ,OACNzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACE1C,MAAOyC,EACPE,QAAS3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,MACTf,MAAOY,QAOjBzB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAaC,UAAU,WAAWZ,UAAWhD,EAAQH,aACnD8C,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWD,UAAU,UAArB,gBACAjB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,aAAW,eACXC,KAAK,cACLhB,UAAWhD,EAAQF,MACnB6B,MAAOZ,EACPkD,SApEwB,SAAAC,GAC9BlD,EAAmBkD,EAAMC,OAAOxC,SAqEzB,CAAC,SAAU,WAAWG,IAAI,SAAA0C,GAAW,OACpC7B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACE1C,MAAO6C,EACPF,QAAS3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,MACTf,MAAOgB,QAKf7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEkB,SAhGkB,SAAAC,GACxB1D,EAAU0D,EAAMC,OAAOxC,QAgGjBA,MAAOpB,EACPkE,YAAY,SACZC,QAAQ,WACRC,WAAY,CACVC,eACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAgBC,SAAS,SACvBnC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,WAMTvC,OAAOwB,KAAKzC,GACV4F,OAqCT,SAAsB7D,GACpB,OAAO,SAAA8D,GAAS,OAAwC,IAApC9D,EAAY+D,QAAQD,IAtC1BE,CAAahE,IACpB6D,OACyB,WAAxBrE,EACIyE,GAsCOzD,EArCKhB,EAsCjB,SAAAoB,GAAG,OAAwD,IAApDA,EAAIsD,cAAcH,QAAQvD,EAAM0D,kBApCvCL,OACC,SAAAjD,GAAG,OAAIA,EAAIsD,cAAcH,QAAQ3E,EAAY8E,gBAAkB,IAEhEvD,IAAI,SAAAC,GACH,IAAMqB,EAAOhE,EAAM2C,GACbuD,EAAQ3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGf,GACjB,OACEY,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,KAAK,QACLN,UAAWhD,EAAQR,KACnBuC,IAAKA,EACLwB,KAAMZ,EAAAC,EAAAC,cAACO,EAAD,MACNI,MAAO8B,EACP7B,QAASvB,EAAiBH,SAQxC,SAASqD,EAAarD,GACpB,OAC8B,IAA5BA,EAAImD,QAAQ,aACiB,IAA7BnD,EAAImD,QAAQ,cACgB,IAA5BnD,EAAImD,QAAQ,aACgB,IAA5BnD,EAAImD,QAAQ,aACc,IAA1BnD,EAAImD,QAAQ,SCrLDK,MARf,WACE,OACE5C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC9C,EAAD,QCKcyF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf755b67.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as icons from \"@material-ui/icons\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { TextField, InputAdornment } from \"@material-ui/core\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport IconFilterList from \"@material-ui/icons/FilterList\";\r\n\r\nconsole.log(icons);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  chip: {\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  oot: {\r\n    display: \"flex\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3)\r\n  },\r\n  group: {\r\n    margin: theme.spacing(1, 0)\r\n  }\r\n}));\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const [filterValue, setFilter] = React.useState(\"\");\r\n  const [radioValueIconsType, setIconsTypeValue] = React.useState(\"Normal\");\r\n  const [radioValueModulesType, setModuleTypeValue] = React.useState(\"import\");\r\n  const [chosedIcons, setChosedIcons] = React.useState([]);\r\n  const [copyTemplateValue, setCopyTemplateValue] = React.useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    retempateCopyValue();\r\n  });\r\n\r\n  const templateCopyString = keys =>\r\n    keys\r\n      .map(key =>\r\n        radioValueModulesType === \"import\"\r\n          ? `import Icon${key} from '@material-ui/icons/${key}'`\r\n          : `const Icon${key} require('@material-ui/icons/${key}')`\r\n      )\r\n      .join(\"\\n\");\r\n\r\n  const handleInputChange = event => {\r\n    setFilter(event.target.value);\r\n  };\r\n  const handleIconsClick = key => () => {\r\n    setChosedIcons(chosedIcons.concat([key]));\r\n    setCopyTemplateValue(templateCopyString(chosedIcons.concat([key])));\r\n  };\r\n\r\n  const retempateCopyValue = () =>\r\n    setCopyTemplateValue(templateCopyString(chosedIcons));\r\n\r\n  const handleChangeIconsType = event => {\r\n    setIconsTypeValue(event.target.value);\r\n  };\r\n\r\n  const handleChangeModulesType = event => {\r\n    setModuleTypeValue(event.target.value);\r\n  };\r\n\r\n  const handleDeleteChosedIcons = key => () => {\r\n    const newChosedIcons = [...chosedIcons];\r\n    let indexInChosed = -1;\r\n    newChosedIcons.forEach((chosedKey, index) => {\r\n      if (key === chosedKey) indexInChosed = index;\r\n    });\r\n    newChosedIcons.splice(indexInChosed, 1);\r\n    setChosedIcons(newChosedIcons);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <TextField\r\n          className={classes.copyField}\r\n          fullWidth={true}\r\n          multiline={true}\r\n          value={copyTemplateValue}\r\n        />\r\n      </div>\r\n      <div>\r\n        {chosedIcons.map(key => {\r\n          const Icon = icons[key];\r\n          return (\r\n            <Chip\r\n              size=\"large\"\r\n              className={classes.chip}\r\n              key={key}\r\n              icon={<Icon />}\r\n              label={\"\"}\r\n              onClick={handleIconsClick(key)}\r\n              onDelete={handleDeleteChosedIcons(key)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Icons Type</FormLabel>\r\n        <RadioGroup\r\n          aria-label=\"Icons Type\"\r\n          name=\"iconsTypes\"\r\n          className={classes.group}\r\n          value={radioValueIconsType}\r\n          onChange={handleChangeIconsType}\r\n        >\r\n          {[\"Normal\", \"Rounded\", \"Outline\", \"TwoTone\", \"Sharp\"].map(\r\n            iconType => (\r\n              <FormControlLabel\r\n                value={iconType}\r\n                control={<Radio />}\r\n                label={iconType}\r\n              />\r\n            )\r\n          )}\r\n        </RadioGroup>\r\n      </FormControl>\r\n\r\n      <FormControl component=\"fieldset\" className={classes.formControl}>\r\n        <FormLabel component=\"legend\">Modules type</FormLabel>\r\n        <RadioGroup\r\n          aria-label=\"Modules type\"\r\n          name=\"moduleTypes\"\r\n          className={classes.group}\r\n          value={radioValueModulesType}\r\n          onChange={handleChangeModulesType}\r\n        >\r\n          {[\"import\", \"require\"].map(typeModules => (\r\n            <FormControlLabel\r\n              value={typeModules}\r\n              control={<Radio />}\r\n              label={typeModules}\r\n            />\r\n          ))}\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <div>\r\n        <TextField\r\n          onChange={handleInputChange}\r\n          value={filterValue}\r\n          placeholder=\"filter\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <IconFilterList />\r\n              </InputAdornment>\r\n            )\r\n          }}\r\n        />\r\n      </div>\r\n      {Object.keys(icons)\r\n        .filter(filterChosed(chosedIcons))\r\n        .filter(\r\n          radioValueIconsType === \"Normal\"\r\n            ? normalFilter\r\n            : filterTyped(radioValueIconsType)\r\n        )\r\n        .filter(\r\n          key => key.toUpperCase().indexOf(filterValue.toUpperCase()) > -1\r\n        )\r\n        .map(key => {\r\n          const Icon = icons[key];\r\n          const Label = <>{key}</>;\r\n          return (\r\n            <Chip\r\n              size=\"large\"\r\n              className={classes.chip}\r\n              key={key}\r\n              icon={<Icon />}\r\n              label={Label}\r\n              onClick={handleIconsClick(key)}\r\n            />\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction normalFilter(key) {\r\n  return (\r\n    key.indexOf(\"Rounded\") === -1 &&\r\n    key.indexOf(\"Outlined\") === -1 &&\r\n    key.indexOf(\"Outline\") === -1 &&\r\n    key.indexOf(\"TwoTone\") === -1 &&\r\n    key.indexOf(\"Sharp\") === -1\r\n  );\r\n}\r\n\r\nfunction filterChosed(chosedIcons) {\r\n  return iconsKeys => chosedIcons.indexOf(iconsKeys) === -1;\r\n}\r\n\r\nfunction filterTyped(value) {\r\n  return key => key.toUpperCase().indexOf(value.toUpperCase()) !== -1;\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ChoseIconWidget from \"./ChoseIconWidget\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChoseIconWidget />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}